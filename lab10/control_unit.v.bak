module control_unit (
    input clk,
    input reset,
    input [8:0] IR, // [8:6]=Opcode, [5:3]=Rx, [2:0]=Ry
    output reg [3:0] mux_sel,
    output reg incr_pc,
    output reg en_G, en_A,
    output reg [14:0] en_registers, // R0-R7, G, A, ADDR, IR, DOUT, W
    output reg addsub_mode
);

    reg [2:0] step; // T1 to T8
    wire [2:0] opcode = IR[8:6];
    wire [2:0] Rx     = IR[5:3];
    wire [2:0] Ry     = IR[2:0];

    // Control signal indexes in en_registers
    localparam R0=0, R1=1, R2=2, R3=3, R4=4, R5=5, R6=6, R7=7;
    localparam G=8, A=9, ADDR=10, IRREG=11, DOUT=12, W=13;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            step <= 3'd0;
            en_registers <= 0;
            mux_sel <= 0;
            incr_pc <= 0;
            en_G <= 0;
            en_A <= 0;
            addsub_mode <= 0;
        end else begin
            step <= step + 1;
            en_registers <= 0;
            incr_pc <= 0;
            en_G <= 0;
            en_A <= 0;
            addsub_mode <= 0;

            case (opcode)
                3'b000: begin // mv Rx, Ry
                    case (step)
                        3'd1: mux_sel <= Ry;
                        3'd2: en_registers[Rx] <= 1; // Rx <- Ry
                        3'd3: begin mux_sel <= 7; en_registers[R7] <= 1; incr_pc <= 1; end
                    endcase
                end

                3'b001: begin // mvi Rx, #D
                    case (step)
                        3'd1: mux_sel <= 7; // Count(R7)
                        3'd2: en_registers[ADDR] <= 1;
                        3'd3: mux_sel <= 8; // Din
                        3'd4: en_registers[Rx] <= 1;
                        3'd5: mux_sel <= 7; en_registers[R7] <= 1; incr_pc <= 1;
                    endcase
                end

                3'b010: begin // add Rx, Ry
                    case (step)
                        3'd1: mux_sel <= Ry;
                        3'd2: en_A <= 1;
                        3'd3: mux_sel <= Rx;
                                 addsub_mode <= 0; // add mode
                                 en_G <= 1;
                        3'd4: en_registers[Rx] <= 1; // Rx <- G
                        3'd5: mux_sel <= 7; en_registers[R7] <= 1; incr_pc <= 1;
                    endcase
                end

                3'b011: begin // sub Rx, Ry
                    case (step)
                        3'd1: mux_sel <= Ry;
                        3'd2: en_A <= 1;
                        3'd3: mux_sel <= Rx;
                                 addsub_mode <= 1; // sub mode
                                 en_G <= 1;
                        3'd4: en_registers[Rx] <= 1;
                        3'd5: mux_sel <= 7; en_registers[R7] <= 1; incr_pc <= 1;
                    endcase
                end
            endcase
        end
    end
endmodule
